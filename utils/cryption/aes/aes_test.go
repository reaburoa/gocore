package aes

import (
	"bytes"
	"testing"
)

type CryptCBCTest struct {
	key string
	iv  string
	in  []byte
	out []byte
}

var cryptoCBCSTests = []CryptCBCTest{
	{"n551zo9VNOvG34zh", "RkFXq13S3u4ub8kI", []byte{0x6e, 0x57, 0x64, 0x6f, 0x57, 0x61, 0x4a, 0x6a, 0x4b, 0x38}, []byte{0xda, 0xd9, 0xde, 0xdb, 0x60, 0x9b, 0x6c, 0x90, 0xf8, 0x9d, 0x06, 0xcd, 0x96, 0xc7, 0x9c, 0xd6}},
	{"zUADUfGa60GNelCU", "N59JYQLI2uZ5Fs0I", []byte{0x74, 0x73, 0x77, 0x31, 0x48, 0x43, 0x4d, 0x31, 0x4a, 0x66}, []byte{0x3e, 0xc9, 0xf3, 0x03, 0x5f, 0x02, 0x41, 0x24, 0x1c, 0x28, 0x14, 0x76, 0xe7, 0x23, 0xcc, 0x79}},
	{"rXU7C8xDpbFxhwJz", "SHQfooA5dlbSd0TW", []byte{0x6f, 0x41, 0x35, 0x54, 0x38, 0x6d, 0x48, 0x41, 0x72, 0x46}, []byte{0xee, 0xfe, 0x6e, 0x00, 0xc9, 0x66, 0x8d, 0xa4, 0x35, 0x25, 0xf4, 0x74, 0xa4, 0x07, 0xb7, 0x27}},
	{"IWYrOhRIL0L5qAoK", "EtH4owfoGuYqjcH7", []byte{0x4b, 0x6d, 0x76, 0x37, 0x69, 0x77, 0x38, 0x6f, 0x49, 0x6f}, []byte{0x20, 0x11, 0x77, 0xf3, 0x7d, 0xe5, 0x99, 0xa6, 0xb1, 0x20, 0x79, 0x32, 0xec, 0x52, 0x5b, 0x47}},
}

type CryptECBTest struct {
	key string
	in  []byte
	out []byte
}

var cryptoECBTests = []CryptECBTest{
	{"NV19jd8wp1atNZYd", []byte{0x44, 0x6a, 0x44, 0x72, 0x4c, 0x62, 0x54, 0x65, 0x31, 0x50}, []byte{0x56, 0x6c, 0x72, 0x59, 0x52, 0x75, 0x58, 0x55, 0x69, 0x48, 0x43, 0x44, 0x65, 0x55, 0x4a, 0x63, 0x72, 0x67, 0x54, 0x56, 0x2b, 0x77, 0x3d, 0x3d}},
	{"hdaEpZLze7TmG0pO", []byte{0x37, 0x31, 0x4b, 0x68, 0x6a, 0x6c, 0x72, 0x78, 0x75, 0x51}, []byte{0x2b, 0x6d, 0x4f, 0x42, 0x30, 0x67, 0x6f, 0x52, 0x6b, 0x30, 0x45, 0x65, 0x51, 0x68, 0x74, 0x2b, 0x67, 0x49, 0x61, 0x72, 0x79, 0x67, 0x3d, 0x3d}},
	{"0u8FeBB4lJeS8lOE", []byte{0x5a, 0x75, 0x57, 0x4b, 0x57, 0x30, 0x31, 0x46, 0x41, 0x4f}, []byte{0x43, 0x59, 0x75, 0x52, 0x62, 0x35, 0x56, 0x64, 0x74, 0x6b, 0x43, 0x65, 0x6c, 0x62, 0x67, 0x63, 0x44, 0x75, 0x79, 0x58, 0x67, 0x41, 0x3d, 0x3d}},
	{"vt0B0mqVSGMgN31B", []byte{0x75, 0x72, 0x43, 0x6e, 0x49, 0x46, 0x46, 0x4c, 0x55, 0x63}, []byte{0x7a, 0x77, 0x30, 0x38, 0x38, 0x34, 0x4d, 0x4d, 0x48, 0x74, 0x55, 0x4e, 0x44, 0x46, 0x31, 0x48, 0x63, 0x2f, 0x48, 0x78, 0x68, 0x77, 0x3d, 0x3d}},
}

func TestAesEncrypt(t *testing.T) {
	for _, tt := range cryptoECBTests {
		s, _ := AesEncrypt(string(tt.in), tt.key)
		if !bytes.Equal([]byte(s), tt.out) {
			t.Error("failed")
		}
	}
}

func TestAesDecrypt(t *testing.T) {
	for _, tt := range cryptoECBTests {
		s, _ := AesDecrypt(string(tt.out), tt.key)
		if !bytes.Equal([]byte(s), tt.in) {
			t.Error("failed")
		}
	}
}

func TestEncryptUseCBC(t *testing.T) {
	for _, tt := range cryptoCBCSTests {
		s, _ := EncryptUseCBC(tt.in, []byte(tt.key), []byte(tt.iv))
		if !bytes.Equal(s, tt.out) {
			t.Error("failed")
		}
	}
}

func TestDecryptUseCBC(t *testing.T) {
	for _, tt := range cryptoCBCSTests {
		s, _ := DecryptUseCBC(tt.out, []byte(tt.key), []byte(tt.iv))
		if !bytes.Equal(s, tt.in) {
			t.Error("failed")
		}
	}
}
