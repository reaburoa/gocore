package des

import (
	"bytes"
	"testing"
)

type CryptCBCTest struct {
	key string
	iv  string
	in  []byte
	out []byte
}

var cryptoCBCSTests = []CryptCBCTest{
	{"Ao3HeJwf", "Eg23lvTU", []byte{0x61, 0x5a, 0x53, 0x38, 0x7a, 0x6d, 0x50, 0x55, 0x7a, 0x59}, []byte{0x45, 0x2d, 0xba, 0xa8, 0x08, 0x59, 0x98, 0x6f, 0x84, 0xa0, 0xf2, 0xc9, 0x52, 0xff, 0xe2, 0xd1}},
	{"3Ni411MO", "4x9aGOwX", []byte{0x39, 0x33, 0x77, 0x43, 0x6f, 0x49, 0x30, 0x35, 0x6f, 0x6d}, []byte{0xb3, 0xf3, 0x08, 0xcf, 0x6d, 0x87, 0x7b, 0xd0, 0x77, 0xda, 0x01, 0x6b, 0x87, 0x4a, 0x66, 0x5a}},
	{"aCLUCdVA", "pVMWwHYX", []byte{0x56, 0x78, 0x6d, 0x31, 0x63, 0x77, 0x62, 0x50, 0x65, 0x55}, []byte{0xe7, 0x45, 0xaf, 0x71, 0xcc, 0xbd, 0xcd, 0xb6, 0xc8, 0x52, 0x1d, 0x25, 0x2a, 0xda, 0x22, 0x04}},
	{"ysK55VBH", "qRfbYn8U", []byte{0x69, 0x44, 0x76, 0x46, 0x4b, 0x76, 0x30, 0x49, 0x69, 0x55}, []byte{0x7b, 0x5f, 0x62, 0xbd, 0xb8, 0x03, 0xbf, 0x61, 0x2f, 0x6b, 0xb4, 0x9b, 0x3f, 0xc0, 0x75, 0xe9}},
}

type CryptECBTest struct {
	key string
	in  []byte
	out []byte
}

var cryptoECBTests = []CryptECBTest{
	{"is9f1548", []byte{0x44, 0x54, 0x51, 0x6e, 0x4d, 0x63, 0x71, 0x38, 0x6e, 0x52}, []byte{0x3b, 0x07, 0x4e, 0x66, 0x48, 0x29, 0x18, 0x02, 0x12, 0xa4, 0x81, 0x31, 0xb9, 0x13, 0x88, 0x0f}},
	{"YkjUEdDv", []byte{0x45, 0x65, 0x45, 0x4f, 0x72, 0x57, 0x44, 0x4f, 0x44, 0x73}, []byte{0xfc, 0x7c, 0x78, 0x07, 0x41, 0x16, 0x9a, 0x14, 0x23, 0x4a, 0x4e, 0x8b, 0xec, 0x3a, 0x89, 0x71}},
	{"IXJdcw2o", []byte{0x4c, 0x31, 0x47, 0x67, 0x55, 0x44, 0x4a, 0x6f, 0x39, 0x49}, []byte{0xe1, 0x6a, 0x54, 0x86, 0x24, 0x0c, 0x87, 0xe1, 0x49, 0x79, 0x93, 0x67, 0x70, 0xa5, 0x5f, 0xe9}},
	{"Yk3RlT5S", []byte{0x73, 0x78, 0x66, 0x4b, 0x55, 0x44, 0x6d, 0x51, 0x6f, 0x67}, []byte{0x65, 0x18, 0x39, 0xc3, 0xb6, 0x79, 0x7c, 0xc0, 0x90, 0x3c, 0xb2, 0x0d, 0x83, 0x54, 0x23, 0x40}},
}

func TestEncryptCBC(t *testing.T) {
	for _, tt := range cryptoCBCSTests {
		s, _ := EncryptCBC(string(tt.in), tt.key, tt.iv)
		if !bytes.Equal([]byte(s), tt.out) {
			t.Error("failed")
		}
	}
}

func TestDecryptCBC(t *testing.T) {
	for _, tt := range cryptoCBCSTests {
		s, _ := DecryptCBC(string(tt.out), tt.key, tt.iv)
		if !bytes.Equal([]byte(s), tt.in) {
			t.Error("failed")
		}
	}
}

func TestEncryptECB(t *testing.T) {
	for _, tt := range cryptoECBTests {
		s, _ := EncryptECB(string(tt.in), tt.key)
		if !bytes.Equal([]byte(s), tt.out) {
			t.Error("failed")
		}
	}
}

func TestDecryptECB(t *testing.T) {
	for _, tt := range cryptoECBTests {
		s, _ := DecryptECB(string(tt.out), tt.key)
		if !bytes.Equal([]byte(s), tt.in) {
			t.Error("failed")
		}
	}
}
