package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"os"
	"path"
	"strings"
	"unicode"

	"github.com/tealeg/xlsx"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"google.golang.org/protobuf/compiler/protogen"
)

const version = "1.0.0"

type conf struct {
	FeEcode *string // front end ecode path
}

var gConfs conf

func generateFrontEnd() bool {
	return gConfs.FeEcode != nil && *gConfs.FeEcode != ""
}

func main() {
	showVersion := flag.Bool("version", false, "print the version and exit")
	flag.Parse()
	if *showVersion {
		fmt.Printf("protoc-gen-go-errors %v\n", version)
		return
	}

	var flags flag.FlagSet
	gConfs = conf{
		FeEcode: flags.String("fe_ecode", "", "if use front end ecode, please set dir for this param(such as api/docs/fe_ecode)"),
	}

	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			// {package_name}_http_server.pb.go
			generateErrors(gen, f)
		}
		return nil
	})
}

const (
	gocoreApi     = protogen.GoImportPath("github.com/sunmi-OS/gocore/v2/api")
	ecodePackage  = protogen.GoImportPath("github.com/sunmi-OS/gocore/v2/api/ecode")
	errorsPackage = protogen.GoImportPath("errors")
)

func generateFileHeader(g *protogen.GeneratedFile, file *protogen.File, gen *protogen.Plugin) {
	g.P("// Code generated by protoc-gen-go-gin. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-gin v", version)
	g.P("// - protoc            ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
}

// generateFile generates a _grpc.pb.go file containing gRPC service definitions.
func generateErrors(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Enums) == 0 {
		return nil
	}
	g := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+".pb.go", file.GoImportPath)
	generateFileHeader(g, file, gen)
	generateErrorsContent(file, g)

	if generateFrontEnd() {
		generateFrontEndErrorsFile(file, g)
	}
	return g
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func printErr(format string, a ...any) {
	fmt.Fprintf(os.Stderr, format, a...)
}

// generateErrorsContent generates the http service definitions, excluding the package statement.
func generateErrorsContent(file *protogen.File, g *protogen.GeneratedFile) {
	if 0 == len(file.Enums) {
		g.Skip()
		return
	}

	g.P("const (")
	for _, enum := range file.Enums {
		for _, v := range enum.Values {
			g.P(v.Desc.Name(), " = ", v.Desc.Number())
		}
		g.P()
	}
	g.P(")")
	g.P()

	g.P("var (")
	g.P("ErrMap = map[int]string{")
	for _, enum := range file.Enums {
		for _, v := range enum.Values {
			// make v.Desc.Name() to camel case
			g.P(v.Desc.Name(), ": \"", makeErrString(v.Comments, string(v.Desc.Name())), "\",")
		}
		g.P()
	}
	g.P("})")
	g.P()

	g.P("func makeNewErr(code int, msg ...string) *ecode.ErrorV2 {")
	g.P(`msgStr := ErrMap[code]
		if len(msg) > 0 {
			msgStr = msg[0]
		}
		return ecode.NewV2(code, msgStr)
	}`)
	g.P()

	// make error func return ecode.ErrorV2
	for _, enum := range file.Enums {
		for _, v := range enum.Values {
			g.P("// code: ", v.Desc.Number(), " msg: \"", makeErrString(v.Comments, string(v.Desc.Name())), "\"")
			g.P("func ", case2Camel(string(v.Desc.Name())), "(msg ...string) *", ecodePackage.Ident("ErrorV2"), " {")
			g.P("return makeNewErr(", v.Desc.Name(), ", msg...)")
			g.P("}")
			g.P()
		}
	}

	// make Is func
	for _, enum := range file.Enums {
		for _, v := range enum.Values {
			g.P("func Is", case2Camel(string(v.Desc.Name())), "(err error) bool {")
			g.P("if se := new(", ecodePackage.Ident("ErrorV2"), "); ", errorsPackage.Ident("As"), "(err, &se) {")
			g.P("return se.Code() == ", v.Desc.Name())
			g.P("}")
			g.P("return false")
			g.P("}")
			g.P()

			g.P("func Is", case2Camel(string(v.Desc.Name())), "DEEP(err error) bool {")
			g.P("if se := new(", ecodePackage.Ident("ErrorV2"), "); errors.As(err, &se) {")
			g.P("return se.Code() == ", v.Desc.Name(), " && se.Message() == ErrMap[", v.Desc.Name(), "]")
			g.P("}")
			g.P("return false")
			g.P("}")
			g.P()
		}
	}
}

// generateErrorsContent generates the http service definitions, excluding the package statement.
func generateFrontEndErrorsFile(file *protogen.File, g *protogen.GeneratedFile) {
	if 0 == len(file.Enums) {
		g.Skip()
		return
	}

	pathname := path.Join(*gConfs.FeEcode, path.Base(string(file.GoImportPath)+"/zh_en.xlsx"))
	os.MkdirAll(path.Dir(pathname), 0755)
	// 创建一个新的Excel文件
	xFile := xlsx.NewFile()

	// 添加一个新的Sheet
	sheet, err := xFile.AddSheet("Sheet1")
	if err != nil {
		panic(err)
	}
	// 在Sheet中添加一行
	row := sheet.AddRow()
	row.AddCell().Value = "code"
	row.AddCell().Value = "zh"
	row.AddCell().Value = "en"

	enMap := map[string]string{}
	zhMap := map[string]string{}
	for _, enum := range file.Enums {
		for _, v := range enum.Values {
			en, zh := getEnZhErrorString(v.Comments, string(v.Desc.Name()))
			key := fmt.Sprintf("error.%v", int32(v.Desc.Number()))
			enMap[key] = en
			zhMap[key] = zh

			// 在Sheet中添加一行
			row = sheet.AddRow()
			row.AddCell().Value = fmt.Sprintf("%v", int32(v.Desc.Number()))
			row.AddCell().Value = strings.TrimSpace(zh)
			row.AddCell().Value = strings.TrimSpace(en)
		}
	}

	err = xFile.Save(pathname)
	if err != nil {
		fmt.Println(" xFile.Save err0=", err.Error())
	}

	if buf, err := json.MarshalIndent(enMap, "", "  "); err == nil {
		pathname := path.Join(*gConfs.FeEcode, path.Base(string(file.GoImportPath)+"/en.json"))
		os.WriteFile(pathname, buf, 0644)
	}
	if buf, err := json.MarshalIndent(zhMap, "", "  "); err == nil {
		pathname := path.Join(*gConfs.FeEcode, path.Base(string(file.GoImportPath)+"/zh.json"))
		os.WriteFile(pathname, buf, 0644)
	}
}

func getEnZhErrorString(comment protogen.CommentSet, name string) (string, string) {
	if comment.Trailing.String() != "" {
		en := strings.TrimSpace(strings.Replace(comment.Trailing.String(), "//", "", 1))
		zh := en
		if generateFrontEnd() {
			strs := strings.Split(en, "||")
			if len(strs) == 2 {
				en = strings.TrimSpace(strs[0])
				zh = strings.TrimSpace(strs[1])
			}
		}
		return en, zh
	}
	en := err2word(name)
	return en, en
}

func makeErrString(comment protogen.CommentSet, name string) string {
	if comment.Trailing.String() != "" {
		str := strings.TrimSpace(strings.Replace(comment.Trailing.String(), "//", "", 1))

		if generateFrontEnd() {
			strs := strings.Split(str, "||")
			if len(strs) == 2 {
				str = strings.TrimSpace(strs[0])
			}
		}

		return str
	}
	return err2word(name)
}

func err2word(name string) string {
	s := strings.TrimPrefix(name, "ERR_")
	s = strings.ReplaceAll(s, "_", " ")
	s = strings.ToLower(s)
	return s
}

var enCases = cases.Title(language.AmericanEnglish, cases.NoLower)

func case2Camel(name string) string {
	if !strings.Contains(name, "_") {
		if name == strings.ToUpper(name) {
			name = strings.ToLower(name)
		}
		return enCases.String(name)
	}
	strs := strings.Split(name, "_")
	words := make([]string, 0, len(strs))
	for _, w := range strs {
		hasLower := false
		for _, r := range w {
			if unicode.IsLower(r) {
				hasLower = true
				break
			}
		}
		if !hasLower {
			w = strings.ToLower(w)
		}
		w = enCases.String(w)
		words = append(words, w)
	}

	return strings.Join(words, "")
}
