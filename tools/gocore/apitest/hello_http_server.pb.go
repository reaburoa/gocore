// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// versions:
// - protoc-gen-go-gin v1.0.3
// - protoc            v4.24.2
// source: apitest/hello.proto

package apitest

import (
	gin "github.com/gin-gonic/gin"
	api "github.com/sunmi-OS/gocore/v2/api"
)

// HelloHTTPServer is the server API for Hello service.
type HelloHTTPServer interface {
	CreateHello(*api.Context, *CreateHelloReq) (*CreateHelloResp, error)
	UpdateHello(*api.Context, *UpdateHelloReq) (*UpdateHelloResp, error)
	DeleteHello(*api.Context, *DeleteHelloReq) (*DeleteHelloResp, error)
	GetHello(*api.Context, *GetHelloReq) (*GetHelloResp, error)
	ListHello(*api.Context, *ListHelloReq) (*ListHelloResp, error)
}

func RegisterHelloHTTPServer(s *gin.Engine, srv HelloHTTPServer) {
	r := s.Group("/")
	r.POST("/v3/createHello", _Hello_CreateHello_HTTP_Handler(srv))
	r.POST("/v3/updateHello", _Hello_UpdateHello_HTTP_Handler(srv))
	r.POST("/v3/deleteHello", _Hello_DeleteHello_HTTP_Handler(srv))
	r.POST("/v3/getHello", _Hello_GetHello_HTTP_Handler(srv))
	r.POST("/v3/listHello", _Hello_ListHello_HTTP_Handler(srv))
}

func _Hello_CreateHello_HTTP_Handler(srv HelloHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &CreateHelloReq{}
		ctx := api.NewContext(g)
		resp, err := srv.CreateHello(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _Hello_UpdateHello_HTTP_Handler(srv HelloHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &UpdateHelloReq{}
		ctx := api.NewContext(g)
		resp, err := srv.UpdateHello(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _Hello_DeleteHello_HTTP_Handler(srv HelloHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &DeleteHelloReq{}
		ctx := api.NewContext(g)
		resp, err := srv.DeleteHello(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _Hello_GetHello_HTTP_Handler(srv HelloHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &GetHelloReq{}
		ctx := api.NewContext(g)
		resp, err := srv.GetHello(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _Hello_ListHello_HTTP_Handler(srv HelloHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &ListHelloReq{}
		ctx := api.NewContext(g)
		resp, err := srv.ListHello(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}
